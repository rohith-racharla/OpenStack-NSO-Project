#!/bin/bash

datetime=$(date)
openrc=$1
tag=$2
ssh_public=$3
ssh_private=${ssh_public%.pub}

source "$openrc"
chmod 600 "$ssh_private"
chmod 600 "$ssh_private"

echo "$(date) Starting the operate sequence"

# Variables
network="${tag}_network"
subnet="${tag}_subnet"
keypair="${tag}_keypair"
router="${tag}_router"
securitygroup="${tag}_securitygroup"
proxy1="${tag}_HAproxy1"
proxy2="${tag}_HAproxy2"
bastion="${tag}_bastion"
nodes="${tag}_dev"
vip_port="${tag}_vip"
sshconfig="${tag}_config"
known_hosts_file="known_hosts"
inventory_file="hosts"
f1="$(cat floating1)"
count_nodes="$(cat node_count.txt)"

main() {
    active_servers=$(openstack server list --status ACTIVE -f value -c Name | grep -oP "${nodes}([1-9]+)" | sort)

    for server in $active_servers; do
        ip_address=$(openstack server list --name "$server" -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+')
        echo " " >> "$sshconfig"
        echo "Host $server" >> "$sshconfig"
        echo "   User ubuntu" >> "$sshconfig"
        echo "   HostName $ip_address" >> "$sshconfig"
        echo "   IdentityFile $PWD/$1" >> "$sshconfig"
        echo "   UserKnownHostsFile=~/dev/null" >> "$sshconfig"
        echo "   StrictHostKeyChecking no" >> "$sshconfig"
        echo "   PasswordAuthentication no" >> "$sshconfig"
        echo "   ProxyJump $bastion" >> "$sshconfig"
        echo "$server" >> "$inventory_file"
    done

    HAPfixedip1=$(openstack server show "$proxy1" -c addresses | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')
    HAPfixedip2=$(openstack server show "$proxy2" -c addresses | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')

    echo "$(date) Generating config file"
    {
        echo "Host $bastion"
        echo "   User ubuntu"
        echo "   HostName $f1"
        echo "   IdentityFile $PWD/$1"
        echo "   UserKnownHostsFile /dev/null"
        echo "   StrictHostKeyChecking no"
        echo "   PasswordAuthentication no"
    } >> "$sshconfig"

    {
        echo " "
        echo "Host $proxy1"
        echo "   User ubuntu"
        echo "   HostName $HAPfixedip1"
        echo "   IdentityFile $PWD/$1"
        echo "   StrictHostKeyChecking no"
        echo "   PasswordAuthentication no"
        echo "   ProxyJump $bastion"
    } >> "$sshconfig"

    {
        echo " "
        echo "Host $proxy2"
        echo "   User ubuntu"
        echo "   HostName $HAPfixedip2"
        echo "   IdentityFile $PWD/$1"
        echo "   StrictHostKeyChecking no"
        echo "   PasswordAuthentication no"
        echo "   ProxyJump $bastion"
    } >> "$sshconfig"

    echo "$(date) Generating hosts file"
    {
        echo "[bastion]"
        echo "$bastion"
        echo " "
        echo "[HAproxy]"
        echo "$proxy1"
        echo "$proxy2"
        echo " "
        echo "[primary_proxy]"
        echo "$proxy1"
        echo " "
        echo "[backup_proxy]"
        echo "$proxy2"
        echo " "
        echo "[all:vars]"
        echo "ansible_user=ubuntu"
        echo "ansible_ssh_common_args=\"-F $sshconfig\""
    } >> "$inventory_file"
}

while true
do
    wantednodes=$(cat servers.conf)
    echo "$(date) We need $wantednodes server(s) in total"

    nodeslist=$(openstack server list --status ACTIVE --column Name -f value)
    nodespresent=$(grep -c "$nodes" <<< "$nodeslist")
    echo "$(date) There are $nodespresent server(s) already present"
    totalservers=$(openstack server list --column Name -f value)
    totalnodes=$(grep -c "$nodes" <<< "$totalservers")

    if ((wantednodes > nodespresent)); then
        # Clean up existing files
        [[ -f "$sshconfig" ]] && rm "$sshconfig"
        [[ -f "$known_hosts_file" ]] && rm "$known_hosts_file"
        [[ -f "$inventory_file" ]] && rm "$inventory_file"
        nodes_to_add=$((wantednodes - nodespresent))
        echo "$(date) $nodes_to_add server(s) are to be added"
        echo "[webservers]" >> "$inventory_file"
        for ((i=0; i<nodes_to_add; i++)); do
            a=$((count_nodes+1))
            nodes_name=${nodes}${a}
            server_create=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" "$nodes_name" --key-name "$keypair" --flavor "1C-2GB-50GB" --network "$network" --security-group "$securitygroup")
            count_nodes=$((count_nodes+1))
            echo "$(date) Waiting for the server to become active"
            server_status=""
            while [ "$server_status" != "ACTIVE" ]; do
                sleep 5
                server_status=$(openstack server show "$nodes_name" -c status -f value)
            done
            echo "$(date) Server $nodes_name is active"
        done
        no_of_nodes=$(openstack server list | grep "$nodes" | wc -l)
        echo "$no_of_nodes" > node_count.txt

        echo "$(date) Required number of servers $nodes_to_add created"
        main "$ssh_private"
        echo "$(date) Initializing ansible-playbook"
	sleep 5
        ansible-playbook -i hosts -u 'root' --ssh-extra-args='-p 22 -o ConnectionAttempts=10 -o StrictHostKeyChecking=no' site.yaml

    elif ((wantednodes < nodespresent)); then
        # Clean up existing files
        [[ -f "$sshconfig" ]] && rm "$sshconfig"
        [[ -f "$known_hosts_file" ]] && rm "$known_hosts_file"
        [[ -f "$inventory_file" ]] && rm "$inventory_file"
        nodes_to_delete=$((nodespresent - wantednodes))
        echo "$(date) $nodes_to_delete servers are to be deleted"
        stop=0

        if ((nodes_to_delete > stop)); then
            echo "[webservers]" >> "$inventory_file"
            for ((i=nodes_to_delete; i>0; i--)); do
                server_delete=$(openstack server list --status ACTIVE -f value -c Name | grep -m1 -oP "${tag}_dev([1-9]+)")
                serveremove=$(openstack server delete "$server_delete" --wait)
                sleep 5
            done
            no_of_nodes=$(openstack server list | grep "$nodes" | wc -l)
            echo "$no_of_nodes" > node_count.txt
            echo "$(date) $nodes_to_delete servers deleted"
            main "$ssh_private"
            #echo "$(date) Initialising ansible-playbook"
	    sleep 5
            #ansible-playbook -i hosts -u 'root' --ssh-extra-args='-p 22 -o ConnectionAttempts=10 -o StrictHostKeyChecking=no' site.yaml
        fi
    else
        echo "$(date) Required number of servers $wantednodes are already present"
    fi

    # Check if HAproxy1 and HAproxy2 servers are paused
    if [[ "$(openstack server show "$proxy1" -f value -c status)" == "PAUSED" ]]; then
        echo "$(date) HAproxy1 server ($proxy1) is PAUSED."
    fi
    if [[ "$(openstack server show "$proxy2" -f value -c status)" == "PAUSED" ]]; then
        echo "$(date) HAproxy2 server ($proxy2) is PAUSED."
    fi

    echo "Entering sleep mode"
    sleep 30
done
